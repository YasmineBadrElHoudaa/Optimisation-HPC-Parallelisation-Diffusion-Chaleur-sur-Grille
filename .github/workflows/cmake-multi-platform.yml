# CMake Workflow - Multi-platform with enhanced configurations
name: Enhanced CMake CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Linux & MacOS)
      if: ${{ runner.os != 'Windows' }}
      run: |
        sudo apt-get update || true
        sudo apt-get install -y build-essential cmake || true

    - name: Install dependencies (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Run Tests
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

    - name: Code Coverage (Optional)
      if: ${{ matrix.build_type == 'Debug' }}
      run: |
        gcovr -r . --html-details coverage.html --output coverage.html
        echo "Code coverage report generated."

    - name: Upload Test and Coverage Results
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/Testing
          ${{ github.workspace }}/coverage.html
